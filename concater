<?php

echo PHP_EOL . PHP_EOL . PHP_EOL;
echo ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,," . PHP_EOL . PHP_EOL;
echo "   ████╗ ████╗ ███╗  ██╗ ████╗ ████╗ ██████╗█████╗█████╗" . PHP_EOL;
echo "  ██╔══╝██╔═██╗████╗ ██║██╔══╝██╔═██╗╚═██╔═╝██╔══╝██╔═██╗" . PHP_EOL;
echo "  ██║   ██║ ██║██╔██╗██║██║   ██████║  ██║  ███╗  █████╔╝" . PHP_EOL;
echo "  ██║   ██║ ██║██║╚████║██║   ██╔═██║  ██║  ██╔╝  ██╔═██╗" . PHP_EOL;
echo "  ╚████╗╚████╔╝██║ ╚███║╚████╗██║ ██║  ██║  █████╗██║ ██║" . PHP_EOL;
echo "   ╚═══╝ ╚═══╝   ╚═╝ ╚═╝ ╚═══╝╚═╝ ╚═╝  ╚═╝  ╚════╝╚═╝ ╚═╝" . PHP_EOL;
echo "         Developed by Gabriel Lucernas Pascual" . PHP_EOL;
echo "               Since December 17, 2016" . PHP_EOL;
echo "                   Version 1.0.1" . PHP_EOL;
echo "         Site URL: http://ghabxph.info/concater" . PHP_EOL;
echo "    Repository URL: https://github.com/ghabxph/concater" . PHP_EOL;
echo PHP_EOL;
echo "``````````````````````````````````````````````````````````" . PHP_EOL . PHP_EOL;

/**
 * The Concater Class
 *
 * @author      Gabriel Lucernas Pascual <me@ghabxph.info>
 * @since       2016.12.17
 * @requires    PHP v7
 * @version     1.0.1
 */
Class Concater{

    /**
     * The configuration array
     * @var array
     */
    private $aConfig;

    /**
     * The no-cache flag
     * @var boolean
     */
    private $bNoCache;

    /**
     * The watch flag
     * @var boolean
     */
    private $bWatch;

    /**
     * The datetime format constant
     * @var string
     */
    const DATETIME_FORMAT = "F d Y H:i:s";

    /**
     * Method that concatinates files
     * @param  array $aFiles            The array containing the local or remote path of the files.
     *                                  Format:
     *                                  array(
     *                                      'concater' => array(
     *                                          array(
     *                                              'remote' => array(
     *                                                  'remote_address_of_file_to_concatinate', ....
     *                                               ),'local' => array(
     *                                                   'path-to-file' => array(
     *                                                       'name-of-file', ....
     *                                                   ), ....
     *                                              )
     *                                          ), array ( ... ) ...
     *                                      )
     *                                 )
     * @param  string $sVendorFilePath  The path of the vendor file
     * @return array                    Array that contains the status of the function.
     */
    public function concat(array $aConfig, bool $bNoCache = false, bool $bWatch = false): array{
        if(!isset($aConfig['concater'])) return array('bStatus' => false, 'sMsg' => 'Invalid concater file.');

        $this->aConfig = $aConfig;
        $this->bNoCache = $bNoCache;
        $this->bWatch = $bWatch;

        $aConfig = $this->standardizeConcaterConfigFormat();

        foreach($aConfig['concater'] as $aFiles){
            echo '  ################################################################' . PHP_EOL;
            echo '  ##' . PHP_EOL;
            echo '  ##   Preparing things for your ' . basename($aFiles['vendor-file']) . PHP_EOL;
            echo '  ##' . PHP_EOL;
            echo '  ################################################################' . PHP_EOL;
            echo PHP_EOL;
            echo "Downloading and concatinating remote files..." . PHP_EOL;
            echo "------------------------------------------------------" . PHP_EOL . PHP_EOL;
            $aRemote = $this->concatRemoteFiles($aFiles, $bNoCache);
            echo PHP_EOL;
            echo "Concatenating local files..." . PHP_EOL;
            echo "------------------------------------------------------" . PHP_EOL . PHP_EOL;
            $aLocal = $this->concatLocalFiles($aFiles);
            echo PHP_EOL;

            if($aRemote['bStatus'] === false)
                return array('bStatus' => false, 'sMsg' => $aRemote['sMsg']);

            if($aLocal['bStatus'] === false)
                return array('bStatus' => false, 'sMsg' => $aLocal['sMsg']);

            echo PHP_EOL;
            echo '        ###################################################' . PHP_EOL;
            echo '        ## Concatenating remote files and local files...' . PHP_EOL;
            echo '        ##' . PHP_EOL;
            $sConcat = $aRemote['sMsg'] . $aLocal['sMsg'];
            echo '        ## Done concatenating remote files and local files. Will write this to your ' . basename($aFiles['vendor-file']) . PHP_EOL;
            echo '        ##' . PHP_EOL;
            echo '        ## Creating/Opening ' . basename($aFiles['vendor-file']) . PHP_EOL;
            echo '        ##' . PHP_EOL;
            $rDest = fopen($aFiles['vendor-file'], "w");
            echo '        ## Overwritting existing ' . basename($aFiles['vendor-file']) . ' file' . PHP_EOL;
            fwrite($rDest, $sConcat);
            echo '        ##' . PHP_EOL;
            echo '        ## Operations on ' . basename($aFiles['vendor-file']) . ' file is done. Now closing this file.' . PHP_EOL;
            echo '        ##' . PHP_EOL;
            echo '        ###################################################' . PHP_EOL;
            fclose($rDest);
            echo PHP_EOL;
            echo '8  88            8""""8                     8   8' . PHP_EOL;
            echo '8   8 eeeeeee    8    8 eeeee eeeee eeee    8   8 eeee eeeee  eeee' . PHP_EOL;
            echo '8e    8  8  8    8e   8 8  88 8   8 8       8eee8 8    8   8  8' . PHP_EOL;
            echo '88    8e 8  8    88   8 8   8 8e  8 8eee    88  8 8eee 8eee8e 8eee' . PHP_EOL;
            echo '88    88 8  8    88   8 8   8 88  8 88      88  8 88   88   8 88' . PHP_EOL;
            echo '88    88 8  8    88eee8 8eee8 88  8 88ee    88  8 88ee 88   8 88ee 88 88 88' . PHP_EOL;
            echo '------------------------ I \' M  D O N E  H E R E ------------------------' . PHP_EOL;
            echo PHP_EOL;
        }
        echo PHP_EOL;
        echo PHP_EOL;

        if($bWatch){
            $this->watch();
        }

        echo '    DO SOMETHING PRODUCTIVE :)';              

        return array('bStatus' => true, 'sMsg' => '');
    }

    /**
     * Standardize the Concater's configuration format. This will change numerical index
     * of local files into a file name as a key, and filemtime date formatted as a string as a value.
     * @return array The standardized format.
     */
    private function standardizeConcaterConfigFormat(){
        for($i = 0; $i < count($this->aConfig['concater']); $i++){
            foreach($this->aConfig['concater'][$i]['local'] as $sPath => $aFiles){
                $aArray = array();
                foreach($aFiles as $sFile){
                    $aArray[$sFile] = '<last-modification-datetime-format-here>';
                }
                $this->aConfig['concater'][$i]['local'][$sPath] = $aArray;
            }
        }
        return $this->aConfig;
    }

    /**
     * Retrieves and sets the local file modification time on each local file in the config.
     * @return array The configuration array ($this->aConfig)
     */
    private function updateLocalFileModificationTime(){
        for($i = 0; $i < count($this->aConfig['concater']); $i++){
            foreach($this->aConfig['concater'][$i]['local'] as $sPath => $aFiles){
                foreach($aFiles as $sFile => $sLastModificationTime){
                    $this->aConfig['concater'][$i]['local'][$sPath][$sFile] = date(self::DATETIME_FORMAT, filemtime("$sPath/$sFile"));
                }
            }
        }
        return $this->aConfig;
    }

    /**
     * Watches every changes from local files
     * @return void nothing
     */
    private function watch(){

        echo "                         __..--.._" . PHP_EOL;
        echo "  .....              .--~  .....  `." . PHP_EOL;
        echo ".\":    \"`-..  .    .' ..-'\"    :\". `" . PHP_EOL;
        echo "` `._ ` _.'`\"(     `-\"'`._ ' _.' '" . PHP_EOL;
        echo "     ~~~      `.          ~~~" . PHP_EOL;
        echo "              .'" . PHP_EOL;
        echo "             /" . PHP_EOL;
        echo "            (" . PHP_EOL;
        echo "             ^---'" . PHP_EOL;
        echo '    Now watching for changes ...' . PHP_EOL;
        echo '........................................' . PHP_EOL;
        echo '||' . PHP_EOL;

        while(true){
            foreach($this->aConfig['concater'] as $aConfig){
                $aStatus = $this->fileHasChangedInLocal($aConfig);
                if($aStatus['bStatus']){
                    echo '||    ' . date(self::DATETIME_FORMAT . ': ', time()) . $aStatus['sMsg'];
                    $aRemote = $this->concatRemoteFiles($aConfig, false, false);
                    $aLocal = $this->concatLocalFiles($aConfig, false);
                    file_put_contents($aConfig['vendor-file'], $aRemote['sMsg'] . $aLocal['sMsg']);
                }
            }
            usleep(300000);
        }
    }

    /**
     * Detects whether there are changes in the local files included in the configuration array.
     * @param  array $aConfig   The configuration array
     *                          Format:
     *                          array(
     *                              'remote' => array(
     *                                  'address of the file', ...
     *                              ),
     *                              'local' => array(
     *                                  'path-of-the-file(s)' => array(
     *                                      'file-names-in-path' => 'last-modified'
     *                                  ) 
     *                              ),
     *                              'vendor-file' => 'string path to vendor'
     *                          )
     * @return array          An array containing the status whether there is a change in files or not.
     */
    private function fileHasChangedInLocal($aConfig){
        if(!isset($aConfig['local'])){
            return array('bStatus' => false);
        }
        foreach($aConfig['local'] as $sPath => $aFiles){
            foreach($aConfig['local'][$sPath] as $sFileName => $sLastModified){
                if($sLastModified !== date(self::DATETIME_FORMAT, filemtime($sPath . '/' . $sFileName))){
                    return array('bStatus' => true, 'sMsg' => "$sFileName has changed." . PHP_EOL);
                }
            }
        }
        return array('bStatus' => false);
    }

    /**
     * Method that concatinates files from remote.
     * @param  array $aFiles     Array containing the files 
     * @param  bool  $bShowEcho  Boolean that determines whether an echo should be shown or not.
     * @return array             Array containing the status and the string.
     */
    private function concatRemoteFiles(array $aFiles, bool $bNoCache, bool $bShowEcho = true): array{
        $sMsg = '';
        if(!isset($aFiles['remote'])){
            return array('bStatus' => true, 'sMsg' => 'Remote is not set.');
        }

        $sVendorFile = dirname($aFiles['vendor-file']) .'/remote.' . basename($aFiles['vendor-file']);
        if(file_exists($sVendorFile) && $bNoCache === false){
            if($bShowEcho) echo "    Retrieving the cache file " . basename($sFile) . " instead of redownloading everything..." . PHP_EOL;
            $sMsg = file_get_contents($sVendorFile);
            return array('bStatus' => true, 'sMsg' => $sMsg);
        }

        $aFiles = $aFiles['remote'];
        foreach($aFiles as $sFile){
            if($bShowEcho) echo "    Downloading " . basename($sFile) . "..." . PHP_EOL;
            $sMsg .= file_get_contents($sFile) . PHP_EOL;
            if($bShowEcho) echo "    " . basename($sFile) . " has been downloaded successfully." . PHP_EOL;
        }
        file_put_contents("$sVendorFile", $sMsg);

        return array('bStatus' => true, 'sMsg' => $sMsg);
    }

    /**
     * Method that concatinates files from local
     * @param  array $aFiles Array containing the files 
     * @param  bool  $bShowEcho  Boolean that determines whether an echo should be shown or not.
     * @return array         Array containing the status and the string.
     */
    private function concatLocalFiles(array $aFiles, $bShowEcho = true): array{
        $sMsg = '';
        if(!isset($aFiles['local'])){
            return array('bStatus' => true, 'sMsg' => 'Local is not set.');
        }
        $aFiles = $aFiles['local'];
        foreach($aFiles as $sPath => $aFile){
            foreach($aFile as $sFile => $sLastModification){
                $sFileBaseName = basename("$sPath/$sFile");
                if($bShowEcho) echo "    Adding " . $sFileBaseName . "..." . PHP_EOL;
                $sMsg .= file_get_contents("$sPath/$sFile") . PHP_EOL;
                if($bShowEcho) echo "    " . $sFileBaseName . " has been added!" .  PHP_EOL;
            }
        }
        $this->updateLocalFileModificationTime();
        return array('bStatus' => true, 'sMsg' => $sMsg);
    }
}

// Instantiates our Concater
$oConcater = new Concater();

// Nothing. Just status...
$aStatus = array();

if(!isset($argv[1])){
    echo 'Usage:' . PHP_EOL;
    echo 'php concater <concater.json path> <[--watch | -w] | [--no-cache | -nc]>' . PHP_EOL;
    echo 'config            - The configuration file in JSON format. (See below)' . PHP_EOL;
    echo '--watch or -w     - Determines whether you will watch or not.' . PHP_EOL;
    echo '--no-cache or -nc - Ignores the cache file for remote files, and will always download them.' . PHP_EOL;
    die();
}
$sConcater = @file_get_contents($argv[1]);

if(strlen($sConcater) === 0){
    die('Invalid concater file.');
}

$aFiles = json_decode($sConcater, true);

$bNoCache = false;
$bWatch = false;

array_shift($argv);
foreach($argv as $sArg){
    if($sArg === '--watch' || $sArg === '-w'){
        $bWatch = true;
    }else if($sArg === '-no-cache' || $sArg === '-nc'){
        $bNoCache = true;
    }
}

$sMsg = $oConcater->concat($aFiles, $bNoCache, $bWatch);
$sMsg = $sMsg['sMsg'];
echo $sMsg;
